import gradio as gr
import requests

API_URL = "http://127.0.0.1:5000/predict"  # Change for Docker if needed

def predict(image_path):
    """Sends an image to the backend for prediction and returns Bengali results."""
    try:
        with open(image_path, "rb") as image_file:
            files = {"file": image_file}
            response = requests.post(API_URL, files=files)

        if response.status_code == 200:
            result = response.json()

            if "ржмрж╛ржВрж▓рж╛_ржлрж▓рж╛ржлрж▓" in result:
                output = "\n".join([
                    f"ЁЯжа рж░рзЛржЧ: {disease['ЁЯжа рж░рзЛржЧ']}\n"
                    f"\nЁЯЪй рж▓ржХрзНрж╖ржг:\n{disease['ЁЯЪй рж▓ржХрзНрж╖ржг']}\n"
                    f"\nЁЯТК ржЪрж┐ржХрж┐рзОрж╕рж╛:\n{disease['ЁЯТК ржЪрж┐ржХрж┐рзОрж╕рж╛']}\n"
                    f"\nЁЯЫбя╕П ржкрзНрж░рждрж┐рж░рзЛржз:\n{disease['ЁЯЫбя╕П ржкрзНрж░рждрж┐рж░рзЛржз']}\n"
                    f"\n{'=' * 40}\n"
                    for disease in result["ржмрж╛ржВрж▓рж╛_ржлрж▓рж╛ржлрж▓"]
                ])

                return output.strip()

        return "тЪая╕П рж╕ржорж╕рзНржпрж╛рж░ ржХрж╛рж░ржгрзЗ ржлрж▓рж╛ржлрж▓ ржЖржирждрзЗ ржмрзНржпрж░рзНржеред"
    
    except Exception as e:
        return f"тЪая╕П рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗ: {str(e)}"

iface = gr.Interface(
    fn=predict,
    inputs=gr.Image(type="filepath"),
    outputs="text",  # Display as text to keep formatting clean
    title="ржлрж╕рж▓ рж░рзЛржЧ рж╕ржирж╛ржХрзНрждржХрж░ржг (Crop Disease Detection)",
    description="ржЖржкржирж╛рж░ ржлрж╕рж▓рзЗрж░ ржкрж╛рждрж╛ ржЖржкрж▓рзЛржб ржХрж░рзБржи ржПржмржВ рж░рзЛржЧ рж╕ржорзНржкрж░рзНржХрзЗ рждржерзНржп ржкрж╛ржиред"
)

iface.launch(server_name="127.0.0.1", server_port=7860)
